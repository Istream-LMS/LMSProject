package org.mifosplatform.portfolio.loanaccount.service;

import java.math.BigDecimal;
import java.math.MathContext;
import java.math.RoundingMode;

import org.mifosplatform.infrastructure.core.api.JsonCommand;
import org.mifosplatform.infrastructure.core.api.JsonQuery;
import org.mifosplatform.infrastructure.core.data.CommandProcessingResult;
import org.mifosplatform.infrastructure.core.serialization.FromJsonHelper;
import org.mifosplatform.infrastructure.security.service.PlatformSecurityContext;
import org.mifosplatform.organisation.taxmapping.domain.TaxMap;
import org.mifosplatform.organisation.taxmapping.domain.TaxMapRepository;
import org.mifosplatform.organisation.taxmapping.domain.TaxMapRepositoryWrapper;
import org.mifosplatform.portfolio.charge.domain.ChargeRepositoryWrapper;
import org.mifosplatform.portfolio.loanaccount.data.LoanCalculatorData;
import org.mifosplatform.portfolio.loanaccount.domain.LoanChargeRepository;
import org.mifosplatform.portfolio.loanaccount.domain.LoanRepository;
import org.mifosplatform.portfolio.loanaccount.loanschedule.service.LoanScheduleCalculationPlatformService;
import org.mifosplatform.portfolio.loanproduct.service.LoanProductReadPlatformService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.google.gson.JsonElement;

@Service
public class LoanCalculatorWritePlatformServiceImpl implements LoanCalculatorWritePlatformService {

	
	private final PlatformSecurityContext context;
    private final LoanRepository loanRepository; 
    private final ChargeRepositoryWrapper chargeRepository;
    private final LoanChargeRepository loanChargeRepository;    
    private final LoanProductReadPlatformService loanProductReadPlatformService;  
    private final LoanChargeReadPlatformService loanChargeReadPlatformService;
    private final LoanReadPlatformService loanReadPlatformService;
    private final FromJsonHelper fromApiJsonHelper;
    private final LoanScheduleCalculationPlatformService calculationPlatformService;
    private final TaxMapRepositoryWrapper taxMapRepository;
    
    public final String ACCOUNTWDV = "ACCT.TAX";
    public final String TAXWDV = "TAX_DEP";
    
    private TaxMap accountWDV;
    private TaxMap taxWDV;
    

    @Autowired
    public LoanCalculatorWritePlatformServiceImpl(final PlatformSecurityContext context,
            final LoanRepository loanRepository, final ChargeRepositoryWrapper chargeRepository, 
            final LoanChargeRepository loanChargeRepository, 
            final LoanProductReadPlatformService loanProductReadPlatformService,
            final LoanChargeReadPlatformService loanChargeReadPlatformService,
            final LoanReadPlatformService loanReadPlatformService, final FromJsonHelper fromApiJsonHelper,
            final LoanScheduleCalculationPlatformService calculationPlatformService,
            final TaxMapRepositoryWrapper taxMapRepository) {
    	
        this.context = context;        
        this.loanRepository = loanRepository;
        this.chargeRepository = chargeRepository;
        this.loanChargeRepository = loanChargeRepository;
        this.loanProductReadPlatformService = loanProductReadPlatformService;
        this.loanChargeReadPlatformService = loanChargeReadPlatformService;
        this.loanReadPlatformService = loanReadPlatformService;
        this.fromApiJsonHelper = fromApiJsonHelper;
        this.calculationPlatformService = calculationPlatformService;
        this.taxMapRepository = taxMapRepository;
    }
	
	@Override
	public CommandProcessingResult createLoanCalculator(JsonCommand command) {
		
		try {
			
			generateData();
			final JsonElement parsedQuery = this.fromApiJsonHelper.parse(command.json());
			
			final JsonQuery query = JsonQuery.from(command.json(), parsedQuery, this.fromApiJsonHelper);

			String vatTaxJsonString = this.calculationPlatformService.calculateTaxLoanSchedule(query, false);
			
			JsonElement vatTaxJson = this.fromApiJsonHelper.parse(vatTaxJsonString);
			
			final BigDecimal finalAmount = this.fromApiJsonHelper.extractBigDecimalWithLocaleNamed("finalAmount", vatTaxJson);
			final BigDecimal totalPrincipal = this.fromApiJsonHelper.extractBigDecimalWithLocaleNamed("principal", query.parsedJson());	
			final BigDecimal vatAmount = this.fromApiJsonHelper.extractBigDecimalWithLocaleNamed("vatAmount", vatTaxJson);
		
		} catch (Exception e) {
			// TODO: handle exception
		}
		
		
		return null;
	}
	
	private TaxMap getTaxMapData(String taxCode) {
		return this.taxMapRepository.findByTaxCode(taxCode);
	}
	
	private void generateData() {	
		accountWDV = getTaxMapData(ACCOUNTWDV);
		taxWDV = getTaxMapData(TAXWDV);
	}
	
	private static boolean isGreaterThanZero(final BigDecimal value) {
        return value.compareTo(BigDecimal.ZERO) == 1;
    }
	
	private static BigDecimal percentageOf(final BigDecimal value, final BigDecimal percentage) {

        BigDecimal percentageOf = BigDecimal.ZERO;

        if (isGreaterThanZero(value)) {
            final MathContext mc = new MathContext(8, RoundingMode.HALF_EVEN);
            //final BigDecimal multiplicand = percentage.divide(BigDecimal.valueOf(100l), mc);
            percentageOf = value.multiply(multiplicand, mc);
        }
        return percentageOf;
    }
	
	
	
	private LoanCalculatorData generateCalculation(int key, BigDecimal totalAmount) {
		
		final MathContext mc = new MathContext(8, RoundingMode.HALF_EVEN);
		
		BigDecimal one = BigDecimal.ONE, amountawRate, amounttwRate;
		BigDecimal accountWDVRate = accountWDV.getRate();
		BigDecimal taxWDVRate = taxWDV.getRate();
		BigDecimal TWELVE = new BigDecimal(12);
		BigDecimal TWO = new BigDecimal(2);
		
		if ( accountWDV.getTaxInclusive() == 1) {
			amountawRate = one.subtract(accountWDVRate, mc);
		} else {
			amountawRate = one.add(accountWDVRate, mc);
		}
		
		if(taxWDV.getTaxInclusive() == 1) {
			amounttwRate = one.subtract(taxWDVRate, mc);
		} else {
			amounttwRate = one.add(taxWDVRate, mc);
		}
		
		switch (key) {
		
		case 12:
			//=B18*(1-E69*D15/12)			
			BigDecimal awAmount = totalAmount.multiply(amountawRate, mc);
			BigDecimal twAmount = totalAmount.multiply(amounttwRate, mc);
			
			BigDecimal residualAmount = (awAmount.add(twAmount, mc)).divide(TWO, mc);
			
			break;
		
		case 24:
			
			break;

		case 36:
			
			break;

		case 48:
	
			break;

		case 60:
	
			break;

		default:
			break;
		}
		
		return null;
	}

}
