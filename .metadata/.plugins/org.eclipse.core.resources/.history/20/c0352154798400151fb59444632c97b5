package org.mifosplatform.portfolio.loanaccount.service;

import java.math.BigDecimal;
import java.math.MathContext;
import java.math.RoundingMode;

import org.mifosplatform.infrastructure.core.api.JsonCommand;
import org.mifosplatform.infrastructure.core.api.JsonQuery;
import org.mifosplatform.infrastructure.core.data.CommandProcessingResult;
import org.mifosplatform.infrastructure.core.serialization.FromJsonHelper;
import org.mifosplatform.infrastructure.security.service.PlatformSecurityContext;
import org.mifosplatform.organisation.taxmapping.domain.TaxMap;
import org.mifosplatform.organisation.taxmapping.domain.TaxMapRepository;
import org.mifosplatform.organisation.taxmapping.domain.TaxMapRepositoryWrapper;
import org.mifosplatform.portfolio.charge.domain.ChargeRepositoryWrapper;
import org.mifosplatform.portfolio.loanaccount.data.LoanCalculatorData;
import org.mifosplatform.portfolio.loanaccount.domain.LoanChargeRepository;
import org.mifosplatform.portfolio.loanaccount.domain.LoanRepository;
import org.mifosplatform.portfolio.loanaccount.loanschedule.service.LoanScheduleCalculationPlatformService;
import org.mifosplatform.portfolio.loanproduct.service.LoanProductReadPlatformService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;

@Service
public class LoanCalculatorWritePlatformServiceImpl implements LoanCalculatorWritePlatformService {

	
	private final PlatformSecurityContext context;
    private final LoanRepository loanRepository; 
    private final ChargeRepositoryWrapper chargeRepository;
    private final LoanChargeRepository loanChargeRepository;    
    private final LoanProductReadPlatformService loanProductReadPlatformService;  
    private final LoanChargeReadPlatformService loanChargeReadPlatformService;
    private final LoanReadPlatformService loanReadPlatformService;
    private final FromJsonHelper fromApiJsonHelper;
    private final LoanScheduleCalculationPlatformService calculationPlatformService;
    private final TaxMapRepositoryWrapper taxMapRepository;
    
    public final String ACCOUNTWDV = "ACCT.TAX";
    public final String TAXWDV = "TAX_DEP";
    public final String VAT = "VAT";
    private final BigDecimal TWELVE = new BigDecimal(12);
    private final BigDecimal TWO = new BigDecimal(2);
    private final BigDecimal ONEHALF = new BigDecimal(1.15);
    private final BigDecimal HUNDERED = new BigDecimal(100);
    private final BigDecimal ONE = BigDecimal.ONE;
    private final int payTerms[] = {12,24,36,48,60};
    
    private final MathContext mc = new MathContext(8, RoundingMode.HALF_EVEN);
    
    private TaxMap accountWDV;
    private TaxMap taxWDV;
    private TaxMap vatWDV;
    

    @Autowired
    public LoanCalculatorWritePlatformServiceImpl(final PlatformSecurityContext context,
            final LoanRepository loanRepository, final ChargeRepositoryWrapper chargeRepository, 
            final LoanChargeRepository loanChargeRepository, 
            final LoanProductReadPlatformService loanProductReadPlatformService,
            final LoanChargeReadPlatformService loanChargeReadPlatformService,
            final LoanReadPlatformService loanReadPlatformService, final FromJsonHelper fromApiJsonHelper,
            final LoanScheduleCalculationPlatformService calculationPlatformService,
            final TaxMapRepositoryWrapper taxMapRepository) {
    	
        this.context = context;        
        this.loanRepository = loanRepository;
        this.chargeRepository = chargeRepository;
        this.loanChargeRepository = loanChargeRepository;
        this.loanProductReadPlatformService = loanProductReadPlatformService;
        this.loanChargeReadPlatformService = loanChargeReadPlatformService;
        this.loanReadPlatformService = loanReadPlatformService;
        this.fromApiJsonHelper = fromApiJsonHelper;
        this.calculationPlatformService = calculationPlatformService;
        this.taxMapRepository = taxMapRepository;
    }
	
	@Override
	public CommandProcessingResult createLoanCalculator(JsonCommand command) {
		
		try {
			
			generateData();
			JsonObject object = new JsonObject();
			JsonArray jsonArray = new JsonArray();
			Gson gson = new Gson();
			/*final JsonElement parsedQuery = this.fromApiJsonHelper.parse(command.json());
			
			final JsonQuery query = JsonQuery.from(command.json(), parsedQuery, this.fromApiJsonHelper);

			String vatTaxJsonString = this.calculationPlatformService.calculateTaxLoanSchedule(query, false);
			
			JsonElement vatTaxJson = this.fromApiJsonHelper.parse(vatTaxJsonString);
			
			final BigDecimal finalAmount = this.fromApiJsonHelper.extractBigDecimalWithLocaleNamed("finalAmount", vatTaxJson);
			final BigDecimal totalPrincipal = this.fromApiJsonHelper.extractBigDecimalWithLocaleNamed("principal", query.parsedJson());	
			final BigDecimal vatAmount = this.fromApiJsonHelper.extractBigDecimalWithLocaleNamed("vatAmount", vatTaxJson);*/
			
			final JsonElement parsedJson = this.fromApiJsonHelper.parse(command.json());
			final BigDecimal principal = this.fromApiJsonHelper.extractBigDecimalWithLocaleNamed("principal", parsedJson);	
			final BigDecimal interest = this.fromApiJsonHelper.extractBigDecimalWithLocaleNamed("interestRatePerPeriod", parsedJson);	
			final BigDecimal costOfFund = this.fromApiJsonHelper.extractBigDecimalWithLocaleNamed("costOfFund", parsedJson);	
			final BigDecimal maintenance = this.fromApiJsonHelper.extractBigDecimalWithLocaleNamed("maintenance", parsedJson);	
			
			BigDecimal totalPrincipal = principal;
			final BigDecimal accountWDVRate = accountWDV.getRate();
			final BigDecimal taxWDVRate = taxWDV.getRate();
			final BigDecimal amountvwRate = vatWDV.getRate().divide(HUNDERED, mc);
			
			BigDecimal amountawRate, amounttwRate;
			
			if ( accountWDV.getTaxInclusive() == 1) {
				amountawRate = ONE.subtract(accountWDVRate, mc);
			} else {
				amountawRate = ONE.add(accountWDVRate, mc);
			}
			
			if(taxWDV.getTaxInclusive() == 1) {
				amounttwRate = ONE.subtract(taxWDVRate, mc);
			} else {
				amounttwRate = ONE.add(taxWDVRate, mc);
			}
			JsonElement jsonParser;
			BigDecimal processingAmount = principal.multiply(amountvwRate, mc);
			
			for (int payTerm : payTerms) {

				LoanCalculatorData loanCalculatorData = generateCalculation(payTerm, totalPrincipal, interest, costOfFund,
						maintenance, amountawRate, amounttwRate, amountvwRate, processingAmount);
				
				totalPrincipal = loanCalculatorData.getResidualAmountVIP();
				jsonParser = this.fromApiJsonHelper.parse(gson.toJson(loanCalculatorData));
				jsonArray.add(jsonParser);
			}
		
		} catch (Exception e) {
			// TODO: handle exception
		}
		
		
		return null;
	}
	
	private TaxMap getTaxMapData(String taxCode) {
		return this.taxMapRepository.findByTaxCode(taxCode);
	}
	
	private void generateData() {	
		accountWDV = getTaxMapData(ACCOUNTWDV);
		taxWDV = getTaxMapData(TAXWDV);
		vatWDV = getTaxMapData(VAT);
	}
	
	/*private static boolean isGreaterThanZero(final BigDecimal value) {
        return value.compareTo(BigDecimal.ZERO) == 1;
    }*/
	
	/*private static BigDecimal percentageOf(final BigDecimal value, final BigDecimal percentage) {

        BigDecimal percentageOf = BigDecimal.ZERO;

        if (isGreaterThanZero(value)) {
            final MathContext mc = new MathContext(8, RoundingMode.HALF_EVEN);
            //final BigDecimal multiplicand = percentage.divide(BigDecimal.valueOf(100l), mc);
            percentageOf = value.multiply(multiplicand, mc);
        }
        return percentageOf;
    }
	*/
	
	
	private LoanCalculatorData generateCalculation(int key, BigDecimal retailPrice, 
			BigDecimal intrestRate, BigDecimal cofForMonth, BigDecimal maintenanceForMonth, 
			BigDecimal amountawRate, BigDecimal amounttwRate, 
			BigDecimal amountvwRate, BigDecimal processingAmount) {

		switch (key) {

		case 12:
			BigDecimal keyBigDecimal = new BigDecimal(key);
			BigDecimal keyPercent = keyBigDecimal.divide(TWELVE, mc); //D15/12
			BigDecimal vatAmount = retailPrice.multiply(amountvwRate, mc); //(1)
			BigDecimal purchasePrice = retailPrice.subtract(vatAmount, mc);//(2)
	
			//BigDecimal amountawRateVal = amountawRate.multiply(keyPercent, mc);
			//BigDecimal amounttwRateVal = amounttwRate.multiply(keyPercent, mc);
			
			BigDecimal awAmount = processingAmount.multiply((amountawRate.multiply(keyPercent, mc)), mc);//(3) //=B18*(1-E69*D15/12)
			BigDecimal twAmount = processingAmount.multiply((amounttwRate.multiply(keyPercent, mc)), mc);//(4) //=B18*(1-E70*D15/12)

			BigDecimal residualAmountVEP = (awAmount.add(twAmount, mc)).divide(TWO, mc);//(5) //D45=(D55+D56) /2
			BigDecimal residualAmountVIP = residualAmountVEP.multiply(ONEHALF, mc);//(6) // =D45*1.15
			BigDecimal residualCost = residualAmountVEP.divide(processingAmount, mc);//(7) //=D45/B18
			BigDecimal residualDeprecisation = (processingAmount.subtract(residualAmountVEP, mc)).divide(keyPercent)
					.divide(processingAmount, mc);//(8) //(($B$18-C45)/(D15/12))/$B$18
			
			BigDecimal coiForMonth = (processingAmount.multiply(intrestRate, mc)).divide(HUNDERED, mc);//(9) //=($B$18*8*D15/D15)/100
			BigDecimal deprecisationForMonth = processingAmount.multiply(residualDeprecisation, mc); //(10) //=$B$18*D43			
			BigDecimal totalForMonth = coiForMonth.add(cofForMonth, mc).add(maintenanceForMonth, mc).add(deprecisationForMonth, mc); //(11)
			
			
			BigDecimal coiForYear = keyPercent.multiply(coiForMonth, mc);//(12) //=$B$18*$B$8*(D15/12)/100
			BigDecimal cofForYear = keyPercent.multiply(cofForMonth, mc);//(13) //=B6*D15/12		
			BigDecimal maintenanceForYear = keyPercent.multiply(maintenanceForMonth, mc);//(14) //=$B$7*D15/12
			BigDecimal deprecisationForYear = deprecisationForMonth.multiply(keyPercent, mc);//(15) //=$B$18*D43*D15/12 
			
			BigDecimal totalwoMaintenance = coiForYear.add(deprecisationForYear, mc); //(16)
			BigDecimal totalMaintenance = totalwoMaintenance.add(cofForYear, mc).add(maintenanceForYear, mc); //(17)

			BigDecimal rateWOMaintenance = totalwoMaintenance.divide(keyBigDecimal, mc);//(18) //=D36/D15
			BigDecimal costWOMaintenance = totalwoMaintenance.divide(keyBigDecimal, mc);//(19) //=D36/D15
			BigDecimal rateWithMaintenance = totalMaintenance.divide(keyBigDecimal, mc);//(20) //=D37/D15
			
			BigDecimal quoteWOMaintenance = rateWOMaintenance; //(21)
			BigDecimal quoteWMaintenance = rateWithMaintenance; //(22)

			LoanCalculatorData data = new LoanCalculatorData(retailPrice, vatAmount, purchasePrice, 
					coiForMonth, cofForMonth, maintenanceForMonth, deprecisationForMonth, totalForMonth,
					coiForYear, cofForYear, maintenanceForYear, deprecisationForYear, 
					totalwoMaintenance, totalMaintenance, rateWOMaintenance, costWOMaintenance, rateWithMaintenance,
					residualDeprecisation, residualCost, residualAmountVEP, residualAmountVIP, 
					quoteWOMaintenance, quoteWMaintenance, key);

			break;

		case 24:

			break;

		case 36:

			break;

		case 48:

			break;

		case 60:

			break;

		default:
			break;
		}

		return null;
	}

}
